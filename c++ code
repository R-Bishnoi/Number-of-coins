// memoization 
/*
class Solution{
  public:
	
int solve(int arr[],vector<vector<int>>&dp,int w,int i){
    
   //base case
   if(i==0){
       if(w%arr[0]==0)return w/arr[0];
       else return INT_MAX-1000;
   }
   
 // return already calculated dp 
 if(dp[i][w]!=-1)return dp[i][w];
 
 int not_take=0+solve(arr,dp,w,i-1);
 int take=INT_MAX;
 if(w>=arr[i])
 take=1+solve(arr,dp,w-arr[i],i);
 
 return dp[i][w]=min(take,not_take);
  
}	
	
int minCoins(int coins[], int n, int w) { 
    
vector<vector<int>>dp(n,vector<int>(w+1,-1));

int ans= solve(coins,dp,w,n-1);

if(ans >= INT_MAX-1000)return -1;

else return ans ;
    
} 
};

*/






//tabulation
/*
class Solution{
  public:
	

int minCoins(int arr[], int n, int w) { 
    
vector<vector<int>>dp(n,vector<int>(w+1,0));

for(int j=0;j<=w;j++){
    if(j%arr[0]==0)dp[0][j]=j/arr[0];
    else dp[0][j]=1e9;
}


for(int i=1;i<n;i++){
    for(int j=0;j<=w;j++){
        
        
     int not_take=0+dp[i-1][j];
     int take=1e9;
     if(j>=arr[i])
     take=1+dp[i][j-arr[i]];
        
        dp[i][j]=min(take,not_take);
    }
}

int ans=dp[n-1][w];

if(ans >= 1e9)return -1;

else return ans ;



} 
};
*/
